//------------------------------------------------------------------------------
// <auto-generated>
    //     This code was generated from a template.
    //
    //     Manual changes to this file may cause unexpected behavior in your application.
    //     Manual changes to this file will be overwritten if the code is regenerated.
    //
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Practices.Unity;
using Repository.Pattern.DataContext;
using Repository.Pattern.Ef6;
using Repository.Pattern.Repositories;
using Repository.Pattern.UnitOfWork;
using DataAccess.Models;
namespace WebAPI
{
    public enum UnityRegistrationLifetimeManagerType {
        PerRequest,
        ContainerControlled,
        NotControlled
    }
    public static class UnityConfigRegistrations
    {
        public static void RegisterTypes(IUnityContainer container)
        {
            RegisterTypes(container, UnityRegistrationLifetimeManagerType.PerRequest);
        }
        public static void RegisterTypesOwin(IUnityContainer container)
        {
            RegisterTypes(container, UnityRegistrationLifetimeManagerType.NotControlled);
        }
        public static void RegisterTypes(IUnityContainer container, UnityRegistrationLifetimeManagerType lifetimeMangerType)
        {
            if (lifetimeMangerType == UnityRegistrationLifetimeManagerType.ContainerControlled)
            {
                container
                    .RegisterType<IDataContextAsync, NWEntities>(new ContainerControlledLifetimeManager())
                    .RegisterType<IUnitOfWorkAsync, UnitOfWork>(new ContainerControlledLifetimeManager());
            }
            else if (lifetimeMangerType == UnityRegistrationLifetimeManagerType.PerRequest)
            {
                container
                    .RegisterType<IDataContextAsync, NWEntities>(new PerRequestLifetimeManager())
                    .RegisterType<IUnitOfWorkAsync, UnitOfWork>(new PerRequestLifetimeManager());
            }
            else
            {
                container
                    .RegisterType<IDataContextAsync, NWEntities>()
                    .RegisterType<IUnitOfWorkAsync, UnitOfWork>();
            }
            container 
                .RegisterType<IRepositoryAsync<Category>, Repository<Category>>()
                .RegisterType<Service.ICategoryService, Service.CategoryService>()   
                .RegisterType<IRepositoryAsync<CustomerCustomerDemo>, Repository<CustomerCustomerDemo>>()
                .RegisterType<Service.ICustomerCustomerDemoService, Service.CustomerCustomerDemoService>()   
                .RegisterType<IRepositoryAsync<CustomerDemographic>, Repository<CustomerDemographic>>()
                .RegisterType<Service.ICustomerDemographicService, Service.CustomerDemographicService>()   
                .RegisterType<IRepositoryAsync<Customer>, Repository<Customer>>()
                .RegisterType<Service.ICustomerService, Service.CustomerService>()   
                .RegisterType<IRepositoryAsync<Employee>, Repository<Employee>>()
                .RegisterType<Service.IEmployeeService, Service.EmployeeService>()   
                .RegisterType<IRepositoryAsync<EmployeeTerritory>, Repository<EmployeeTerritory>>()
                .RegisterType<Service.IEmployeeTerritoryService, Service.EmployeeTerritoryService>()   
                .RegisterType<IRepositoryAsync<OrderDetail>, Repository<OrderDetail>>()
                .RegisterType<Service.IOrderDetailService, Service.OrderDetailService>()   
                .RegisterType<IRepositoryAsync<Order>, Repository<Order>>()
                .RegisterType<Service.IOrderService, Service.OrderService>()   
                .RegisterType<IRepositoryAsync<Product>, Repository<Product>>()
                .RegisterType<Service.IProductService, Service.ProductService>()   
                .RegisterType<IRepositoryAsync<Region>, Repository<Region>>()
                .RegisterType<Service.IRegionService, Service.RegionService>()   
                .RegisterType<IRepositoryAsync<Shipper>, Repository<Shipper>>()
                .RegisterType<Service.IShipperService, Service.ShipperService>()   
                .RegisterType<IRepositoryAsync<Supplier>, Repository<Supplier>>()
                .RegisterType<Service.ISupplierService, Service.SupplierService>()   
                .RegisterType<IRepositoryAsync<Territory>, Repository<Territory>>()
                .RegisterType<Service.ITerritoryService, Service.TerritoryService>()                  ;
        }
    }
}