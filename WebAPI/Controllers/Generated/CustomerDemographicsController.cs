//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Linq;
using System.Web.OData;
using System.Web.OData.Query;
using System.Web.OData.Routing;
using Repository.Pattern.UnitOfWork;
using System.Web.Http;
using System.Threading.Tasks;
using System.Net;
using Repository.Pattern.Infrastructure;
using System.Data.Entity.Infrastructure;
using DataAccess.Models;
using Service;

namespace WebAPI.Controllers
{
    [ODataRoutePrefix("CustomerDemographics")]
        public partial class CustomerDemographicsController : ODataController
        {
            private readonly ICustomerDemographicService _service;
            private readonly IUnitOfWorkAsync _unitOfWorkAsync;
    
            public CustomerDemographicsController( 
                IUnitOfWorkAsync unitOfWorkAsync,
                ICustomerDemographicService service)
            {
                _unitOfWorkAsync = unitOfWorkAsync;
                _service = service;
            }
    
            [HttpGet]
            [ODataRoute]
            [EnableQuery]
            public IQueryable<CustomerDemographic> GetCustomerDemographics()
            {
                return _service.Queryable();
            }
    
            [HttpGet]
            [ODataRoute]
            [EnableQuery]
            public SingleResult<CustomerDemographic> GetCustomerDemographicFromId([FromODataUri] string CustomerDemographicId)
            {
                return SingleResult.Create(_service.Queryable().Where(t => t.CustomerTypeID == CustomerDemographicId));
            }
    
            [HttpGet]
            [ODataRoute("({CustomerDemographicid})")]
            [EnableQuery]
            public SingleResult<CustomerDemographic> GetCustomerDemographic([FromODataUri] string CustomerDemographicId)
            {
                return SingleResult.Create(_service.Queryable().Where(t => t.CustomerTypeID == CustomerDemographicId));
            }

            [HttpPut]
            [ODataRoute("({CustomerDemographicId})")]
            public async Task<IHttpActionResult> Put(string CustomerDemographicId, CustomerDemographic item)
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }
    
                if (CustomerDemographicId != item.CustomerTypeID)
                {
                    return BadRequest();
                }
    
                item.ObjectState = ObjectState.Modified;
                _service.Update(item);
    
                try
                {
                    await _unitOfWorkAsync.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ItemExists(CustomerDemographicId))
                    {
                        return NotFound();
                    }
                    throw;
                }
    
                return Updated(item);
            }
    
            [HttpPost]
            [ODataRoute]
            public async Task<IHttpActionResult> Post(CustomerDemographic item)
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }
    
                item.ObjectState = ObjectState.Added;
                _service.Insert(item);
    
                try
                {
                    await _unitOfWorkAsync.SaveChangesAsync();
                }
                catch (DbUpdateException)
                {
                    if (ItemExists(item.CustomerTypeID))
                    {
                        return Conflict();
                    }
                    throw;
                }
    
                return Created(item);
            }
    
            [HttpPatch]
            [AcceptVerbs("PATCH", "MERGE")]
            [ODataRoute("({CustomerDemographicId})")]
            public async Task<IHttpActionResult> Patch(string CustomerDemographicId, Delta<CustomerDemographic> patch)
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }
    
                CustomerDemographic item = await _service.FindAsync(CustomerDemographicId);
    
                if (item == null)
                {
                    return NotFound();
                }
    
                patch.Patch(item);
                item.ObjectState = ObjectState.Modified;
    
                try
                {
                    await _unitOfWorkAsync.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ItemExists(CustomerDemographicId))
                    {
                        return NotFound();
                    }
                    throw;
                }
    
                return Updated(item);
            }
    
            [HttpDelete]
            [ODataRoute]
            public async Task<IHttpActionResult> Delete(string key)
            {
                CustomerDemographic item = await _service.FindAsync(key);
    
                if (item == null)
                {
                    return NotFound();
                }
    
                item.ObjectState = ObjectState.Deleted;
    
                _service.Delete(item);
                await _unitOfWorkAsync.SaveChangesAsync();
    
                return StatusCode(HttpStatusCode.NoContent);
            }
    
            protected override void Dispose(bool disposing)
            {
                if (disposing)
                {
                    _unitOfWorkAsync.Dispose();
                }
                base.Dispose(disposing);
            }
    
            private bool ItemExists(string CustomerDemographicId)
            {
                return _service.Query(e => e.CustomerTypeID == CustomerDemographicId).Select().Any();
            }
        }
}
