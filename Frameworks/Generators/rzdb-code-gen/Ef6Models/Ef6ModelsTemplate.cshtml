@using System.Collections.Generic
@using System.Collections;
@using System.Linq
@using RzDb.CodeGen
@{ SchemaData _Model = (SchemaData)Model; }

@foreach (string entityName in _Model.Keys){<t>##FILE=$OUTPUT_PATH$@entityName.ToSingular()<t/>.cs
using System;
using System.Collections.Generic;
using Repository.Pattern.Ef6;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DataAccess.Models
{
    [Table("@entityName")]
    public partial class @entityName.ToSingular() : Entity
    {

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public @entityName.ToSingular()<t/>()
        {
@{

    List<string> PreviousOneToManyFields = new List<string>();
    foreach (Relationship relationship in _Model[entityName].Relationships.Fetch(RelationshipType.ZeroOrOneToMany))
    {
        <t>     this.@(relationship.ToTableName + "_" + relationship.ToColumnName) = new HashSet<@relationship.ToTableName.ToSingular()>();</t>
        PreviousOneToManyFields.Add(relationship.ToTableName);
    }
<t>        }</t>

    foreach (Property property in _Model[entityName].Properties.Values)
    {
        <t>@(property.IsKey ? "[Key] " : "")<t />public @property.Type.ToNetType(property.IsNullable)<t /> @property.Name { get; set; }</t>
    }
    
    PreviousOneToManyFields.Clear();
    List<Relationship> RelationshipsOneToMany = _Model[entityName].Relationships.Fetch(RelationshipType.ZeroOrOneToMany);
    foreach (Relationship relationship in RelationshipsOneToMany)
    {
        if (Relationships.CountItems(RelationshipsOneToMany, relationship.ToTableName) > 1)
        {
        <t>[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")] 
         @(Relationships.CountItems(RelationshipsOneToMany, relationship.ToTableName)>1 ? "[InverseProperty(\"" + relationship.ToColumnName + "\")]" : "")
         public virtual ICollection<@relationship.ToTableName.ToSingular()> @(relationship.ToTableName + "_" + relationship.ToColumnName)<t/> { get; set; }
            </t>
        }
        else
        {
        <t>[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")] 
         public virtual ICollection<@relationship.ToTableName.ToSingular()> @(relationship.ToTableName + "_" + relationship.ToColumnName) { get; set; }
            </t>
        }
        PreviousOneToManyFields.Add(relationship.ToTableName);
    }

    List<string> PreviousManyToOneFields = new List<string>();
    List<Relationship> RelationshipsManyToOne = _Model[entityName].Relationships.Fetch(RelationshipType.ManyToZeroOrOne);
    foreach (Relationship relationship in RelationshipsManyToOne)
    {
        if (relationship.FromTableName.Equals(entityName))
        {<t>        [ForeignKey("@relationship.ToFieldName")]
        public virtual @relationship.FromTableName.ToSingular() @(relationship.ToFieldName + @relationship.FromTableName.ToSingular()) { get; set; }</t>
        }
        else if (Relationships.CountItems(RelationshipsManyToOne, RelationSearchField.FromTableName, relationship.FromTableName) > 1)
        {<t>        [ForeignKey("@relationship.ToFieldName")]
        public virtual @relationship.FromTableName.ToSingular() @(relationship.ToColumnName) { get; set; }</t>
        }
        else
        {<t>        [ForeignKey("@relationship.ToFieldName")]
        public virtual @relationship.FromTableName.ToSingular() @relationship.FromTableName.ToSingular() { get; set; }</t>
        }
        PreviousManyToOneFields.Add(relationship.FromTableName);
    }
}
    }
}
</t>}