@using System.Collections.Generic
@using RzDb.CodeGen
@{ SchemaData _Model = (SchemaData)Model; }
//------------------------------------------------------------------------------
// <auto-generated>
    //     This code was generated from a template.
    //
    //     Manual changes to this file may cause unexpected behavior in your application.
    //     Manual changes to this file will be overwritten if the code is regenerated.
    //
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Practices.Unity;
using Repository.Pattern.DataContext;
using Repository.Pattern.Ef6;
using Repository.Pattern.Repositories;
using Repository.Pattern.UnitOfWork;
using DataAccess.Models;
namespace WebAPI
{
    public enum UnityRegistrationLifetimeManagerType {
        PerRequest,
        ContainerControlled,
        NotControlled
    }
    public static class UnityConfigRegistrations
    {
        public static void RegisterTypes(IUnityContainer container)
        {
            RegisterTypes(container, UnityRegistrationLifetimeManagerType.PerRequest);
        }
        public static void RegisterTypesOwin(IUnityContainer container)
        {
            RegisterTypes(container, UnityRegistrationLifetimeManagerType.NotControlled);
        }
        public static void RegisterTypes(IUnityContainer container, UnityRegistrationLifetimeManagerType lifetimeMangerType)
        {
            if (lifetimeMangerType == UnityRegistrationLifetimeManagerType.ContainerControlled)
            {
                container
                    .RegisterType<IDataContextAsync, NWEntities>(new ContainerControlledLifetimeManager())
                    .RegisterType<IUnitOfWorkAsync, UnitOfWork>(new ContainerControlledLifetimeManager());
            }
            else if (lifetimeMangerType == UnityRegistrationLifetimeManagerType.PerRequest)
            {
                container
                    .RegisterType<IDataContextAsync, NWEntities>(new PerRequestLifetimeManager())
                    .RegisterType<IUnitOfWorkAsync, UnitOfWork>(new PerRequestLifetimeManager());
            }
            else
            {
                container
                    .RegisterType<IDataContextAsync, NWEntities>()
                    .RegisterType<IUnitOfWorkAsync, UnitOfWork>();
            }
            container @foreach (string key in _Model.Keys) {<t>
                .RegisterType<IRepositoryAsync<@key.ToSingular()>, Repository<@key.ToSingular()>>()
                .RegisterType<Service.I<t/>@key.ToSingular()Service, Service.<t/>@key.ToSingular()Service>()   </t>}
               ;
        }
    }
}